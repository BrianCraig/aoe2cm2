class NameGenerator {

    private readonly ADJECTIVES: string[] = [
        "abundant",
        "adorable",
        "adventurous",
        "aggressive",
        "amused",
        "ancient",
        "angry",
        "annoyed",
        "annoying",
        "anxious",
        "arrogant",
        "ashamed",
        "attractive",
        "average",
        "awful",
        "bad",
        "beautiful",
        "better",
        "bewildered",
        "big",
        "bitter",
        "black",
        "bloody",
        "blue",
        "blushing",
        "bored",
        "brainy",
        "brave",
        "breakable",
        "breezy",
        "brief",
        "bright",
        "broad",
        "broken",
        "bumpy",
        "busy",
        "calm",
        "careful",
        "cautious",
        "charming",
        "cheerful",
        "chilly",
        "chubby",
        "clean",
        "clever",
        "clumsy",
        "cold",
        "colorful",
        "colossal",
        "combative",
        "concerned",
        "condemned",
        "confused",
        "cool",
        "courageous",
        "crazy",
        "creepy",
        "crooked",
        "cruel",
        "cuddly",
        "curious",
        "curly",
        "curved",
        "cute",
        "damaged",
        "damp",
        "dangerous",
        "dark",
        "dead",
        "deep",
        "delicious",
        "determined",
        "different",
        "difficult",
        "dirty",
        "dizzy",
        "doubtful",
        "dry",
        "dusty",
        "eager",
        "early",
        "elated",
        "elegant",
        "embarrassed",
        "empty",
        "energetic",
        "enthusiastic",
        "evil",
        "excited",
        "expensive",
        "fair",
        "faithful",
        "famous",
        "fancy",
        "fantastic",
        "fast",
        "few",
        "fierce",
        "filthy",
        "fine",
        "flaky",
        "fluffy",
        "foolish",
        "fragile",
        "freezing",
        "fresh",
        "friendly",
        "frightened",
        "funny",
        "fuzzy",
        "gentle",
        "gifted",
        "glamorous",
        "glorious",
        "good",
        "gorgeous",
        "graceful",
        "greasy",
        "great",
        "grieving",
        "grotesque",
        "grubby",
        "grumpy",
        "handsome",
        "happy",
        "harsh",
        "healthy",
        "heavy",
        "helpful",
        "hilarious",
        "hissing",
        "hungry",
        "hurt",
        "hushed",
        "icy",
        "important",
        "impossible",
        "innocent",
        "jealous",
        "jolly",
        "juicy",
        "kind",
        "late",
        "lazy",
        "light",
        "little",
        "lively",
        "lonely",
        "loose",
        "loud",
        "lovely",
        "lucky",
        "magnificent",
        "many",
        "massive",
        "melodic",
        "modern",
        "motionless",
        "muddy",
        "mushy",
        "mysterious",
        "narrow",
        "nasty ",
        "nervous",
        "nice",
        "noisy",
        "numerous",
        "obnoxious",
        "odd",
        "old",
        "outstanding",
        "panicky",
        "perfect",
        "plain",
        "plastic",
        "pleasant",
        "poised",
        "poor",
        "powerful",
        "precious",
        "prickly",
        "proud",
        "puny",
        "purring",
        "puzzled",
        "quaint",
        "quick",
        "quiet",
        "rainy",
        "rapid",
        "raspy",
        "real",
        "relieved",
        "repulsive",
        "resonant",
        "rich",
        "ripe",
        "rotten",
        "rough",
        "round",
        "salty",
        "scary",
        "scattered",
        "scrawny",
        "screeching",
        "selfish",
        "shaggy",
        "shaky",
        "shallow",
        "sharp",
        "shiny",
        "shivering",
        "short",
        "shrill",
        "shy",
        "silent",
        "silky",
        "silly",
        "sleepy",
        "slimy",
        "slippery",
        "slow",
        "small",
        "smiling",
        "smoggy",
        "smooth",
        "soft",
        "solid",
        "sour",
        "sparkling",
        "spicy",
        "splendid",
        "spotless",
        "squealing",
        "stale",
        "steady",
        "sticky",
        "stormy",
        "strange",
        "strong",
        "substantial",
        "successful",
        "super",
        "sweet",
        "swift",
        "talented",
        "tall",
        "tame",
        "tart",
        "tasteless",
        "tender",
        "tense",
        "terrible",
        "thankful",
        "thoughtful",
        "thundering",
        "tiny",
        "tired",
        "tough",
        "troubled",
        "uneven",
        "unsightly",
        "unusual",
        "upset",
        "victorious",
        "voiceless",
        "wandering",
        "weak",
        "weary",
        "whispering",
        "wicked",
        "wild",
        "witty",
        "wonderful",
        "wooden",
        "worried",
        "wrong",
        "young"
    ];

    private readonly NAMES: string[] = [
        "Abraha",
        "Aethelfirth",
        "Alexander",
        "Alfonso",
        "Amlak",
        "Archbishop",
        "Arthur",
        "Attila",
        "Babur",
        "Bayinnaung",
        "Belisarius",
        "Bertrand",
        "Bhai",
        "Bi",
        "Bleda",
        "Bui",
        "Bureau",
        "Campeador",
        "Capac",
        "Chand",
        "Charlemagne",
        "Charles",
        "Chatillon",
        "Chu",
        "Cid",
        "Clare",
        "Cuauhtemoc",
        "Dagnajan",
        "Dingfang",
        "Dinh",
        "Dracula",
        "Embriaco",
        "Envoy",
        "Erik",
        "Fastolf",
        "Francesco",
        "Francisco",
        "Frederick",
        "Gaja",
        "Gawain",
        "Genghis",
        "Gidajan",
        "Gonzalo",
        "Granger",
        "Graville",
        "Guglielmo",
        "Guy",
        "Harald",
        "Hardraade",
        "Henry",
        "Hire",
        "Hood",
        "Hrolf",
        "Huayna",
        "Itzcoatl",
        "Jarl",
        "Jayanegara",
        "Jayaviraverman",
        "Jean",
        "Joan",
        "John",
        "Josselyne",
        "Khan",
        "Khosrau",
        "Kitabatake",
        "Kushluk",
        "Lai",
        "Lancelot",
        "Le",
        "Leo",
        "Lionheart",
        "Loi",
        "Luu",
        "Madah",
        "Martel",
        "Miklos",
        "Minamoto",
        "Mordred",
        "Musa",
        "Mustafa",
        "Nevski",
        "Nhan",
        "Nobunaga",
        "Nusayr",
        "Ornlu",
        "Pacal",
        "Pachacuti",
        "Pasha",
        "Pizarro",
        "Prithvi",
        "Prithviraj",
        "Raden",
        "Reynald",
        "Richard",
        "Richemont",
        "Robin",
        "Roland",
        "Saladin",
        "Sancho",
        "Sanyogita",
        "Savaran",
        "Siegfried",
        "Su",
        "Subotai",
        "Sumanguru",
        "Sunda",
        "Sundjata",
        "Suryavarman",
        "Tabinshwehti",
        "Tamerlane",
        "Tariq",
        "Templar",
        "Theodoric",
        "Toldi",
        "Tong",
        "Trien",
        "Tristan",
        "Tuck",
        "Udayadityavarman",
        "Vlad",
        "Wallace",
        "Wang",
        "Wijaya",
        "William",
        "Yekuno",
        "Yi",
        "Yodit",
        "Zawisza",
        "Ziyad"
    ];

    private seed: number;

    private LCG = () => (2 ** 31 - 1 & (this.seed = Math.imul(48271, this.seed))) / 2 ** 31;

    constructor(seed: number = Date.now()) {
        if (seed === 0) {
            throw new Error('LCG must not be initialized with 0');
        }
        this.seed = seed;
    }

    public nextName(): string {
        const adjective = this.ADJECTIVES[Math.floor(this.LCG() * this.ADJECTIVES.length)];
        const capitalisedAdjective = adjective.charAt(0).toUpperCase() + adjective.slice(1);
        const name = this.NAMES[Math.floor(this.LCG() * this.NAMES.length)];
        return capitalisedAdjective + ' ' + name;
    }

    public static getNameFromLocalStorage(): string | null {
        try {
            return localStorage.getItem('username');
        } catch (e) {
            return null;
        }
    }

    public static writeNameToLocalStorage(name: string) {
        try {
            localStorage.setItem('username', name);
        } catch (e) {
            // ignore
        }
    }
}

export default NameGenerator;